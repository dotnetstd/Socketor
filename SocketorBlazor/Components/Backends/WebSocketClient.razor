@using Socketor.DataModel
@using System.Text
@using System.Net.WebSockets
@using Socketor.Utilities
@implements Socketor.Utilities.IMessageBackend

@code {

    public RenderFragment PropertyArea =>
        @<div class="tool-section">
            <div class="config-title">Web Socket 地址</div>
            <input class="config-input" placeholder="WS Address"
                   @bind="WebSocketAddress"/>
            <button @onclick="ChangeConnection"> @_connectButtonText </button>
            <button @onclick="ShowState"> 显示连接状态 </button>
    </div>;

    public async Task SendMessageAsync(string message)
    {
        if (!_connected)
        {
            ShowMessage?.Invoke(new MessageItemDto($"[脱机消息] {message}", OwnerType.Send));
            return;
        }

        Memory<byte> buffer = Encoding.UTF8.GetBytes(message);
        try
        {
            await _webSocket.SendAsync(buffer, WebSocketMessageType.Text,
                true, default);
        }
        catch (AggregateException e)
        {
            foreach (var innerException in e.InnerExceptions)
            {
                ShowMessage?.Invoke(new MessageItemDto($"[发送失败] {innerException.Message}", OwnerType.Log));
            }

            return;
        }

        ShowMessage?.Invoke(new MessageItemDto(message, OwnerType.Send));
    }

    public event Action<MessageItemDto>? ShowMessage;


    private string _connectButtonText = "连接";

    //切换连接或断开
    private async Task ChangeConnection()
    {
        if (_connected)
        {
            await Disconnect();
        }
        else
        {
            await Connect();
        }
    }

    private string WebSocketAddress { get; set; } = "ws://localhost:4649/Chat";
    private ClientWebSocket _webSocket = new();

    private bool _connected;

    //建立连接
    private async Task Connect()
    {
        var url = new Uri(WebSocketAddress);
        _webSocket = new ClientWebSocket();
        try
        {
            //五秒后超时
            var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            var connectTask = _webSocket.ConnectAsync(url, tokenSource.Token);
            await connectTask.ContinueWith(async _ => await AfterConnectAction(), tokenSource.Token);
            await connectTask;
        }
        catch (Exception e)
        {
            ShowMessage?.Invoke(new MessageItemDto($"[连接失败] {e.Message}", OwnerType.Log));
        }
    }

    //尝试连接动作完成后
    private async Task AfterConnectAction()
    {
        //未进入连接状态
        if (_webSocket.State != WebSocketState.Open)
        {
            _connected = false;
            _connectButtonText = "连接";
        }
        else
        {
            _connected = true;
            _connectButtonText = "断开连接";
            OnOpen();
            await BeginReceiveMessage();
        }
    }

    //断开连接
    private async Task Disconnect()
    {
        var disconnectTask = _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure,
            "Client Disconnect", CancellationToken.None);
        await disconnectTask.ContinueWith(_ =>
        {
            _webSocket.Abort();
            _connected = false;
            _connectButtonText = "连接";
            //OnClose();
        });
        await disconnectTask;
    }

    private void OnOpen()
    {
        ShowMessage?.Invoke(new MessageItemDto("连接已开启", OwnerType.Log));
        //刷新状态按钮显示
        StateHasChanged();
    }

    private void OnClose()
    {
        ShowMessage?.Invoke(new MessageItemDto("连接已关闭", OwnerType.Log));
        //刷新状态按钮显示
        StateHasChanged();
    }

    private void OnMessage(string message)
    {
        ShowMessage?.Invoke(new MessageItemDto(message, OwnerType.Receive));
    }


    //后台接收消息
    private async Task BeginReceiveMessage()
    {
        var messageByteBuffer = new List<byte>();
        while (_connected)
        {
            var memory = new Memory<byte>(new byte[1024]);
            var socketResult = await _webSocket.ReceiveAsync(memory, default);
            var bt = memory.ToArray().Take(socketResult.Count);
            messageByteBuffer.AddRange(bt);
            if (!socketResult.EndOfMessage) continue;

            if (socketResult.MessageType == WebSocketMessageType.Close)
            {
                _connected = false;
                OnClose();
            }
            else
            {
                var messageStr = Encoding.UTF8.GetString(messageByteBuffer.ToArray());
                OnMessage(messageStr);
                messageByteBuffer.Clear();
            }
        }
    }

    //显示连接状态
    private void ShowState()
    {
        ShowMessage?.Invoke(new MessageItemDto("WebSocket状态:" + _webSocket.State, OwnerType.Log));
    }

}
