@page "/ws-client"
@using System.Net.WebSockets
@using System.Text
@using Socketor.DataModel

<PageTitle>Web Socket Client</PageTitle>

<WorkspaceLayout>
    <MessageBoxArea>
        <MessageBox @ref="_messageBox"/>
    </MessageBoxArea>
    <SenderBoxArea>
        <SenderBox OnMessageSend="SendMessage"/>
    </SenderBoxArea>
    <ToolBoxArea>
        <GroupBox Title="工具设置">
            <div class="tool-section">
                <div class="config-title">Web Socket 地址</div>
                <input class="config-input" placeholder="WS Address"
                       @bind="WebSocketAddress"/>
                <button @onclick="ChangeConnection">@_connectButtonText</button>
                <button @onclick="ShowState">显示连接状态</button>
            </div>
        </GroupBox>

    </ToolBoxArea>
</WorkspaceLayout>

@code
{

    private MessageBox? _messageBox;

    private void SendMessage(string message)
    {
        if (!_connected)
        {
            _messageBox?.AddItem($"[脱机消息] {message}", OwnerType.Send);
            return;
        }
        Memory<byte> buffer = Encoding.UTF8.GetBytes(message);
        var awaiter = _webSocket.SendAsync(buffer, WebSocketMessageType.Text,
            true, default).GetAwaiter();
        awaiter.OnCompleted(() => _messageBox?.AddItem(message, OwnerType.Send));
    }

    private string _connectButtonText = "连接";
    //切换连接或断开
    private void ChangeConnection()
    {
        if (_connected)
        {
            Disconnect();
        }
        else
        {
            Connect();
        }
    }

    private string WebSocketAddress { get; set; } = "ws://localhost:4649/Chat";
    private ClientWebSocket _webSocket = new();
    private bool _connected = false;
    //建立连接
    private void Connect()
    {
        var url = new Uri(WebSocketAddress);
        _webSocket = new ClientWebSocket();
        try
        {
    //五秒后超时
            var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            var awaiter = _webSocket.ConnectAsync(url, tokenSource.Token).GetAwaiter();
            awaiter.OnCompleted(AfterConnectAction);
        }
        catch (Exception e)
        {
            _messageBox?.AddItem($"[连接失败] {e.Message}", OwnerType.Log);
        }
    }

    //尝试连接动作完成后
    private async void AfterConnectAction()
    {
    //未进入连接状态
        if (_webSocket.State != WebSocketState.Open)
        {
            _connected = false;
            _connectButtonText = "连接";
        }
        else
        {
            _connected = true;
            _connectButtonText = "断开连接";
            OnOpen();
            await BeginReceiveMessage();
        }
    }

    //断开连接
    private void Disconnect()
    {
        var awaiter = _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure,
            "Client Disconnect", CancellationToken.None).GetAwaiter();
        awaiter.OnCompleted(() =>
        {
            _webSocket.Abort();
            _connected = false;
            _connectButtonText = "连接";
    //OnClose();
        });
    }

    private void OnOpen()
    {
        _messageBox?.AddItem("连接已开启", OwnerType.Log);
    //刷新状态按钮显示
        StateHasChanged();
    }

    private void OnClose()
    {
        _messageBox?.AddItem("连接已关闭", OwnerType.Log);
    //刷新状态按钮显示
        StateHasChanged();
    }

    private void OnMessage(string message)
    {
        _messageBox?.AddItem(message, OwnerType.Receive);
    }


    //后台接收消息
    private async Task BeginReceiveMessage()
    {
        var messageByteBuffer = new List<byte>();
        while (_connected)
        {
            var memory = new Memory<byte>(new byte[1024]);
            var socketResult = await _webSocket.ReceiveAsync(memory, default);
            var bt = memory.ToArray().Take(socketResult.Count);
            messageByteBuffer.AddRange(bt);
            if (!socketResult.EndOfMessage) continue;

            if (socketResult.MessageType == WebSocketMessageType.Close)
            {
                _connected = false;
                OnClose();
            }
            else
            {
                var messageStr = Encoding.UTF8.GetString(messageByteBuffer.ToArray());
                OnMessage(messageStr);
                messageByteBuffer.Clear();
            }
        }
    }

    //显示连接状态
    private void ShowState()
    {
        _messageBox?.AddItem("WebSocket状态:" + _webSocket.State, OwnerType.Log);
    }

}