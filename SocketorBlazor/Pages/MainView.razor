@page "/"
@using Socketor.Components.Backends
@using Socketor.DataModel
@using Socketor.Utilities
<div class="main-layout"
     @onmousemove="MouseMove" @onmouseup="MouseUpOrLeave" @onmouseleave="MouseUpOrLeave"
     style="grid-template-columns: @(_navMenuWidth)px 1px 1fr 1px @(_propertyAreaWidth)px;">
    <div class="nav-menu">
        <NavMenu OnNavSelected="OnNavChanged"/>
    </div>
    <VerticalSplit Style="grid-column-start: 2; grid-column-end: 3" DragStart="DragStartNavMenu"/>
    <div class="content-area">
        <div class="main-content" style="grid-template-rows: 1fr 1px @(_sendBoxHeight)px;">
            <div class="message-area">
                <MessageBox @ref="_messageBox"></MessageBox>
            </div>
            <HorizontalSplit Style="grid-row-start: 2; grid-row-end: 3" DragStart="DragStartSendBox"/>
            <div class="sender-area">
                <SenderBox OnMessageSend="SendMessage"/>
            </div>

        </div>
        @* 工具栏 *@
        <ToolBar></ToolBar>
    </div>
    <VerticalSplit Style="grid-column-start: 4; grid-column-end: 5" DragStart="DragStartPropertyArea"/>
    <div class="property-area">
        @_propertyArea
    </div>
</div>
<WebSocketClient @ref="_webSocketClient"/>
<TcpServer @ref="_tcpServer"/>


@code {
    private RenderFragment? _propertyArea;
    private MessageBox _messageBox = null!;

    private WebSocketClient _webSocketClient = null!;
    private TcpServer _tcpServer = null!;

    private void OnNavChanged(int id)
    {
        switch (id)
        {
            case 1:
                SwitchBackend(_webSocketClient);
                break;
            case 2:
                SwitchBackend(_tcpServer);
                break;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SwitchBackend(_webSocketClient);
        }
    }


    public void SwitchBackend(IMessageBackend backend)
    {
        if (_currentBackend != null)
        {
            _currentBackend.ShowMessage -= ShowMessage;
        }

        _currentBackend = backend;
        _currentBackend.ShowMessage += ShowMessage;
        _propertyArea = _currentBackend.PropertyArea;
        //刷新属性区域
        StateHasChanged();
    }

    #region ShowAndSend

    private IMessageBackend? _currentBackend;

    private void ShowMessage(MessageItemDto message)
    {
        _messageBox.AddItem(message);
    }

    private async Task SendMessage(string m)
    {
        if (_currentBackend != null)
        {
            await _currentBackend.SendMessageAsync(m);
        }
    }

    #endregion

    #region ResizeArea

    private double _navMenuWidth = 160;
    private double _propertyAreaWidth = 200;
    private double _sendBoxHeight = 120;

    private void DragStartNavMenu()
    {
        OnMouseMove += ResizeNavMenu;
        OnMouseUpOrLeave += () => { OnMouseMove -= ResizeNavMenu; };
    }

    private void DragStartPropertyArea()
    {
        OnMouseMove += ResizePropertyArea;
        OnMouseUpOrLeave += () => { OnMouseMove -= ResizePropertyArea; };
    }

    private void DragStartSendBox()
    {
        OnMouseMove += ResizeSendBox;
        OnMouseUpOrLeave += () => { OnMouseMove -= ResizeSendBox; };
    }

    private void ResizeNavMenu(MouseEventArgs e)
    {
        _navMenuWidth += e.MovementX;
        if (_navMenuWidth < 0)
        {
            _navMenuWidth = 0;
        }
    }

    private void ResizePropertyArea(MouseEventArgs e)
    {
        _propertyAreaWidth -= e.MovementX;
        if (_propertyAreaWidth < 0)
        {
            _propertyAreaWidth = 0;
        }
    }

    private void ResizeSendBox(MouseEventArgs e)
    {
        _sendBoxHeight -= e.MovementY;
        if (_sendBoxHeight < 0)
        {
            _sendBoxHeight = 0;
        }
    }

    private event Action<MouseEventArgs>? OnMouseMove;

    private void MouseMove(MouseEventArgs e)
    {
        OnMouseMove?.Invoke(e);
    }

    private event Action? OnMouseUpOrLeave;

    private void MouseUpOrLeave()
    {
        OnMouseUpOrLeave?.Invoke();
    }

    #endregion

}