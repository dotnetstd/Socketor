@using Microsoft.Extensions.Localization
@using Socketor.DataModel
@using Microsoft.AspNetCore.Components.Sections
@using Socketor.DataModel.Configs
@inject IStringLocalizer<MessageBox> Localizer

<div class="message-box">
    <CascadingValue TValue="MessageBoxConfig" Name="@nameof(MessageItem.MessageBoxConfig)" Value="MessageBoxConfig">
        <Scroll @ref="_scroll" Height="100%">
            <Virtualize TItem="MessageData" Context="msg" Items="_messageList">
                <MessageItem MessageData="msg"/>
            </Virtualize>
        </Scroll>
    </CascadingValue>
</div>

<SectionContent SectionName="@ConfigSectionName">
    <Card HeaderText="@Localizer["ReceiveSettings"]" IsCollapsible="true">
        <BodyTemplate>
            <div class="config-list">
                <BootstrapInputGroup>
                    <BootstrapInputGroupLabel DisplayText="@Localizer["MaxEntries"]"/>
                    <BootstrapInputNumber Min="1" TValue="int" @bind-Value="MessageBoxConfig.MaxEntries"/>
                </BootstrapInputGroup>
                @* TODO: 内容显示设置 *@
                <Checkbox TValue="bool" IsDisabled="true" DisplayText="Show As Hex" ShowAfterLabel="true"/>
                <Checkbox TValue="bool" @bind-Value="MessageBoxConfig.AutoWarp" DisplayText="@Localizer["AutoWarp"]"
                          ShowAfterLabel="true"/>
            </div>
        </BodyTemplate>
    </Card>
</SectionContent>



@code {

    /// <summary>
    /// The name of the configuration section to which this component belongs.
    /// </summary>
    [Parameter, EditorRequired]
    public required string ConfigSectionName { get; set; }

    [Parameter, EditorRequired] public required MessageBoxConfig MessageBoxConfig { get; set; }

    private readonly List<MessageData> _messageList = [];

    public void AddMessage(MessageData message)
    {
        _messageList.Add(message);
        StateHasChanged();
        _scroll?.ScrollToBottom();

        while (_messageList.Count > MessageBoxConfig.MaxEntries)
        {
            _messageList.RemoveAt(0);
        }
    }

    private Scroll? _scroll;

}