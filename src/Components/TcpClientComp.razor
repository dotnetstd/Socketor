@using System.Text
@using Blazored.LocalStorage
@using Microsoft.Extensions.Localization
@using Socketor.Components.Widgets
@using Socketor.DataModel.Configs
@using Microsoft.AspNetCore.Components.Sections
@using Socketor.DataModel
@using Size = BootstrapBlazor.Components.Size
@inject IStringLocalizer<TcpClientComp> Localizer
@inject ILocalStorageService LocalStorage
@inject ToastService ToastService

@inject ILogger<TcpClientComp> Logger
@inject Tauri Tauri
@implements IAsyncDisposable

<div class="tcp-client-main">
    <div class="tcp-client-left">
        <Split IsVertical="true" Basis="65%" FirstPaneMinimumSize="200px" SecondPaneMinimumSize="80px">
            <FirstPaneTemplate>
                <div class="tcp-client-left-top">
                    <BootstrapInputGroup>
                        <BootstrapInputGroupLabel DisplayText="@Localizer["Host"]"/>
                        <BootstrapInput TValue="string" @bind-Value="Config.Host" Disabled="_isConnected"/>
                        <BootstrapInputGroupLabel DisplayText="@Localizer["Port"]"/>
                        <BootstrapInput TValue="int" @bind-Value="Config.Port" Disabled="_isConnected"/>
                        <Button Text="@ConnectButtonText()" Color="ConnectButtonColor()"
                                OnClick="@ChangeConnectStateClick" IsAsync="true"></Button>
                    </BootstrapInputGroup>
                    <MessageBox @ref="_messageBox" ConfigSectionName="@TcpClientMsgBoxConfigSectionName"
                                MessageBoxConfig="Config.MessageBoxConfig"/>
                </div>
            </FirstPaneTemplate>
            <SecondPaneTemplate>
                <div class="tcp-client-left-bottom">
                    <SendBox ConfigSectionName="@TcpClientSendBoxConfigSectionName"
                             SendBoxConfig="Config.SendBoxConfig" Enabled="_isConnected"
                             OnMessageSend="OnMessageSend"/>
                </div>
            </SecondPaneTemplate>
        </Split>
    </div>

    <div style="grid-column: 2; position: relative; width: calc(100% + 4px)">
        <Scroll style="position: absolute; width: 100%;">
            <div class="tcp-client-right-container">
                <Card HeaderText="@Localizer["ConnectionSettings"]" IsCollapsible="true">
                    <HeaderTemplate>
                        <Button Icon="fa-solid fa-rotate" Size="Size.ExtraSmall" Color="Color.Link"
                                OnClick="@RefreshClientStatus"></Button>
                    </HeaderTemplate>
                    <BodyTemplate>
                        <div class="config-list">
                            <div>@Localizer["ConnectionState"]</div>
                            <BootstrapInputGroup>
                                <Display TValue="string" Value="_connectionState"></Display>
                            </BootstrapInputGroup>
                            <div>@Localizer["ClientId"]</div>
                            <Display TValue="string" Value="@_windowUniqueLabel"></Display>
                        </div>
                    </BodyTemplate>
                </Card>
                <SectionOutlet SectionName="@TcpClientMsgBoxConfigSectionName"/>
                <SectionOutlet SectionName="@TcpClientSendBoxConfigSectionName"/>
            </div>
        </Scroll>
    </div>
</div>

@code {
    private const string TcpClientMsgBoxConfigSectionName = "TcpClientMsgBoxConfig";
    private const string TcpClientSendBoxConfigSectionName = "TcpClientSendBoxConfig";

    private TcpClientConfig Config { get; set; } = new();

    private UnlistenFn? _unlistenClientMessage;
    private ITauriWindow? _tauriWindow;

    private string _connectionState = "Disconnected";

    private string _windowUniqueLabel = "";
    private bool _isConnected;

    private string ConnectButtonText() =>
        _isConnected ? Localizer["Disconnect"] : Localizer["Connect"];

    private BBColor ConnectButtonColor() =>
        _isConnected ? BBColor.Danger : BBColor.Success;

    private MessageBox? _messageBox;

    private bool _isTauri;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _isTauri = await Tauri.Core.IsTauri();
            var storedConfig = await LocalStorage.GetItemAsync<TcpClientConfig?>("TcpClientConfig");
            if (storedConfig != null)
            {
                Config = storedConfig;
            }

            if (_isTauri)
            {
                _tauriWindow = await Tauri.Window.GetCurrentWindow();
                _windowUniqueLabel = await _tauriWindow.Label;
                await _tauriWindow.SetTitle("TCP Client");
                _unlistenClientMessage = await _tauriWindow.Listen<TcpClientEventData>("tcp-client-event", OnTcpClientEventReceived);
                // stop the client when the window is closed
                await _tauriWindow.Once(TauriEventName.WindowCloseRequested, async () =>
                {
                    await DisposeAsync();
                    await _tauriWindow.Destroy();
                });
                // refresh client status on first load
                await RefreshClientStatus();
            }
            else
            {
                Logger.LogWarning("Tauri is not available, TCP client events will not be received.");
            }

            StateHasChanged();
        }
    }


    private async Task RefreshClientStatus()
    {
        if (!_isTauri)
        {
            _connectionState = "Disabled";
            _isConnected = false;
        }

        if (string.IsNullOrWhiteSpace(_windowUniqueLabel))
        {
            await ToastService.Error("Client ID is not set.");
            return;
        }

        try
        {
            var clientInfo = await Tauri.Core.Invoke<TcpClientInfoData>("get_tcp_client_info", new { clientId = _windowUniqueLabel });

            _connectionState = clientInfo.State;
            _isConnected = clientInfo.State == "Connected";
        }
        catch (Exception e)
        {
            _connectionState = "Disabled";
            _isConnected = false;

            await SaveConfig();
            Logger.LogError("Get TCP client status error: {Message}", e.Message);
        }

        StateHasChanged();
    }

    private async Task ChangeConnectStateClick()
    {
        if (!_isTauri)
        {
            await ToastService.Warning(Localizer["TauriNotAvailable"]);
            return;
        }

        await SaveConfig();

        if (_isConnected)
        {
            await DisconnectAsync();
        }
        else
        {
            await ConnectAsync();
        }

        await RefreshClientStatus();
    }

    private async Task ConnectAsync()
    {
        if (string.IsNullOrWhiteSpace(_windowUniqueLabel))
        {
            await ToastService.Error("Client ID is not set.");
            return;
        }

        try
        {
            var connectParams = new
            {
                Config.Host,
                Config.Port,
                ClientId = _windowUniqueLabel,
            };

            await Tauri.Core.Invoke<string>("connect_tcp_client", new { connectParams });

            await SaveConfig();

            var connectMessage = new MessageData(MessageOwner.Info, Encoding.UTF8.GetBytes($"{Localizer["TcpClientConnected"]} - ID: {_windowUniqueLabel}"));
            _messageBox?.AddMessage(connectMessage);

            await ToastService.Success(Localizer["TcpClientConnected"], $"Server ID: {_windowUniqueLabel}");
        }
        catch (Exception e)
        {
            Logger.LogError("Start TCP client error: {Message}", e.Message);
            await ToastService.Error(Localizer["ConnectionFailed"], e.Message);
        }
    }

    private async Task DisconnectAsync()
    {
        if (!_isConnected)
        {
            await ToastService.Warning(Localizer["ClientNotConnected"]);
            return;
        }

        try
        {
            await Tauri.Core.Invoke("disconnect_tcp_client", new { clientId = _windowUniqueLabel });

            var disconnectMessage = new MessageData(MessageOwner.Info, Encoding.UTF8.GetBytes(Localizer["TcpClientDisconnected"]));
            _messageBox?.AddMessage(disconnectMessage);

            await ToastService.Success(Localizer["TcpClientDisconnected"]);
        }
        catch (Exception e)
        {
            Logger.LogError("Stop TCP client error: {Message}", e.Message);
            await ToastService.Error(Localizer["DisconnectionFailed"], e.Message);
        }
    }

    private async Task OnMessageSend(MessageData messageData)
    {
        if (!_isConnected || string.IsNullOrEmpty(_windowUniqueLabel))
        {
            await ToastService.Warning(Localizer["SendFailed"], "Not connected to server");
            return;
        }

        _messageBox?.AddMessage(messageData);
        try
        {
            var message = Encoding.UTF8.GetString(messageData.RawMessage);
            var messageType = messageData.MessageType == MessageType.Text ? "text" : "hex";

            var sendParams = new SendTcpMessageRequest
            {
                ClientId = _windowUniqueLabel,
                Message = message,
                MessageType = messageType
            };

            await Tauri.Core.Invoke("send_tcp_client_message", new { sendParams });
        }
        catch (Exception e)
        {
            var errorMessage = $"{Localizer["SendFailed"]}: {e.Message}";
            _messageBox?.AddMessage(new MessageData(MessageOwner.Error, Encoding.UTF8.GetBytes(errorMessage)));
            await ToastService.Error(Localizer["SendFailed"], e.Message);
        }
    }

    private async Task SaveConfig()
    {
        await LocalStorage.SetItemAsync("TcpClientConfig", Config);
    }

    public async ValueTask DisposeAsync()
    {
        // if (_tauriWindow != null) await _tauriWindow.DisposeAsync();
        if (_unlistenClientMessage != null)
        {
            await _unlistenClientMessage.Invoke();
            _unlistenClientMessage = null;
        }

        if (_isTauri)
        {
            await RefreshClientStatus();
            if (_isConnected)
            {
                await DisconnectAsync();
            }
        }

        await SaveConfig();
    }

    // 数据传输对象
    private class SendTcpMessageRequest
    {
        public required string ClientId { get; set; }
        public required string Message { get; set; }
        public string MessageType { get; set; } = "text";
    }
    
    private class TcpClientInfoData
    {
        public string ClientId { get; set; } = "";
        public string Host { get; set; } = "";
        public int Port { get; set; }
        public string State { get; set; } = "";
    }
    
    private class TcpClientEventData
    {
        public string ClientId { get; set; } = "";
        public string EventType { get; set; } = "";
        public string Message { get; set; } = "";
        public string Timestamp { get; set; } = "";
    }

    private async Task OnTcpClientEventReceived(TcpClientEventData eventData)
    {
        // 只处理当前客户端的事件
        // TODO: 后端根据label发送消息到指定窗口
        if (eventData.ClientId != _windowUniqueLabel)
        {
            return;
        }

        // 根据事件类型处理不同的事件
        var messageOwner = eventData.EventType switch
        {
            "connected" => MessageOwner.Info,
            "disconnected" => MessageOwner.Info,
            "message_received" => MessageOwner.Receive,
            "error" => MessageOwner.Error,
            _ => MessageOwner.Info
        };

        var messageData = new MessageData(messageOwner, Encoding.UTF8.GetBytes(eventData.Message));
        _messageBox?.AddMessage(messageData);

        // 更新连接状态
        switch (eventData.EventType)
        {
            case "connected":
                _isConnected = true;
                _connectionState = "Connected";
                break;
            case "disconnected":
                _isConnected = false;
                _connectionState = "Disconnected";
                break;
            case "error":
                await ToastService.Error(Localizer["Error"], eventData.Message);
                break;
        }

        StateHasChanged();
    }


}
