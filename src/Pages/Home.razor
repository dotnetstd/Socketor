@page "/"
@using Microsoft.Extensions.Localization
@using Socketor.Utilities
@inject CultureService CultureService
@inject IThemeProvider ThemeProvider
@inject Tauri Tauri
@inject IStringLocalizer<Home> Localizer
@inject IJSRuntime JsRuntime

<div data-tauri-drag-region class="drag-zone"></div>
<div class="main-container">
    <div class="setting-bar">
        <BootstrapInputGroup>
            <BootstrapInputGroupIcon style="width: 60px; font-size: 20px" Icon="fa-solid fa-language"/>
            <Select @ref="_languageSelect" TValue="string" Items="_languages" @bind-Value="_currentLanguage"
                    OnSelectedItemChanged="OnSelectedLanguageChanged"></Select>
        </BootstrapInputGroup>
        <div class="theme-toggle">
            <ThemeProvider ></ThemeProvider>
        </div>
    </div>
    <div style="height: 12px;"></div>
    <Button Text="@Localizer["WebSocketServer"]" OnClick="@OpenWebSocketServer"></Button>
    <Button Text="@Localizer["WebSocketClient"]" OnClick="@OpenWebSocketClient"></Button>
    <Button Text="@Localizer["TcpServer"]" OnClick="@OpenTcpServer"></Button>
    <Button Text="@Localizer["TcpClient"]" OnClick="@OpenTcpClient"></Button>
    <Button Text="@Localizer["UdpClient"]" OnClick="@OpenUdpClient"></Button>

</div>

@code
{
    private bool _isTauri;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ThemeProvider.SetThemeAsync("auto");
        _currentLanguage = await CultureService.GetCurrentCulture() ?? "en-US";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _isTauri = await Tauri.Core.IsTauri();
        }
    }

    private readonly List<SelectedItem> _languages =
    [
        new("en-US", "English(US)"),
        new("zh-CN", "简体中文")
    ];

    private string? _currentLanguage;
    private Select<string>? _languageSelect;

    private async Task OnSelectedLanguageChanged(SelectedItem selectedLanguage)
    {
        await CultureService.SetCurrentCulture(selectedLanguage.Value);
        StateHasChanged();
    }

    private async Task OpenNewWindow(string url)
    {
        if (_isTauri)
        {
            var windowGuid = Guid.NewGuid().ToString();
            await Tauri.WebviewWindow.CreateWebviewWindow(windowGuid,
                new WindowOptions
                {
                    Title = "Initializing...",
                    TitleBarStyle = TitleBarStyle.Transparent,
                }, new WebviewOptions
                {
                    Url = url
                });
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("open", url, "_blank");
        }
    }

    private async Task OpenWebSocketServer()
    {
        await OpenNewWindow("/WebSocketServer");
    }
    
    private async Task OpenWebSocketClient()
    {
        await OpenNewWindow("/WebSocketClient");
    }
    
    private async Task OpenTcpServer()
    {
        await OpenNewWindow("/TcpServer");
    }
    
    private async Task OpenTcpClient()
    {
        await OpenNewWindow("/TcpClient");
    }
    
    private async Task OpenUdpClient()
    {
        await OpenNewWindow("/UdpClient");
    }
}
